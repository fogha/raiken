- name: Deploy to Contabo Server
  uses: appleboy/ssh-action@v1.0.3
  with:
    host: ${{ secrets.CONTABO_HOST }}
    username: ${{ secrets.CONTABO_USERNAME }}
    key: ${{ secrets.CONTABO_SSH_KEY }}
    script: |
      set -e

      APP_NAME="raiken"
      APP_DIR="/opt/$APP_NAME"
      DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      echo "🚀 Starting deployment of $APP_NAME..."

      sudo mkdir -p "$APP_DIR"
      cd "$APP_DIR"

      echo "🔐 Logging into GitHub Container Registry..."
      echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      echo "📥 Pulling latest Docker image: $DOCKER_IMAGE"
      sudo docker pull "$DOCKER_IMAGE"

      echo "🛑 Stopping existing containers (if any)..."
      sudo docker compose down || true

      if [ ! -f docker-compose.yml ]; then
        echo "📝 Creating docker-compose.yml..."
        sudo tee docker-compose.yml > /dev/null <<'EOF'
version: "3.8"
services:
  app:
    image: REPLACE_IMAGE
    container_name: raiken-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION}
      - RAIKEN_ENABLE_AI_ANALYSIS=true
    ports:
      - "3000:3000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
EOF
      fi

      sudo sed -i "s|image: REPLACE_IMAGE|image: $DOCKER_IMAGE|g" docker-compose.yml

      export OPENROUTER_API_KEY='${{ secrets.OPENROUTER_API_KEY }}'
      export NEXT_PUBLIC_BASE_URL='${{ secrets.NEXT_PUBLIC_BASE_URL }}'
      export NEXT_PUBLIC_APP_VERSION='${{ github.sha }}'

      echo "🚀 Starting application..."
      sudo docker compose up -d

      echo "⏳ Waiting for application to be ready..."
      sleep 30

      echo "🔍 Performing health check..."
      if curl -f -s http://localhost:3000 > /dev/null; then
        echo "✅ Application is healthy!"
      else
        echo "❌ Health check failed! Recent logs:"
        sudo docker compose logs --tail=50
        exit 1
      fi

      echo "🧹 Cleaning up old Docker images..."
      sudo docker image prune -f

      echo "🎉 Deployment completed successfully!"
      echo "📊 Container status:"
      sudo docker compose ps

      echo "📋 Recent logs:"
      sudo docker compose logs --tail=20
