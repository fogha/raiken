name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy application (Docker Compose)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.CONTABO_HOST }}
          username: ${{ secrets.CONTABO_USERNAME }}
          key: ${{ secrets.CONTABO_SSH_KEY }}
          port: ${{ secrets.CONTABO_PORT }}
          script: |
            set -e

            APP_NAME="raiken"
            APP_DIR="/opt/$APP_NAME"
            DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

            echo "🚀 Deploying $APP_NAME ..."
            sudo mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "🔐 Logging into GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo "📥 Pulling image: $DOCKER_IMAGE"
            sudo docker pull "$DOCKER_IMAGE"

            echo "🛑 Bringing down current stack (if any)"
            sudo docker compose down || true

            if [ ! -f docker-compose.yml ]; then
              echo "📝 Creating docker-compose.yml..."
              sudo tee docker-compose.yml > /dev/null <<EOF
            version: '3.8'
            services:
              app:
                image: $DOCKER_IMAGE
                container_name: ${APP_NAME}-app
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
                  - NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
                  - NEXT_PUBLIC_APP_VERSION=${{ github.sha }}
                  - RAIKEN_ENABLE_AI_ANALYSIS=true
                ports:
                  - "3000:3000"
                volumes:
                  - ./data:/app/data
                  - ./logs:/app/logs
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
            EOF
            fi

            # Ensure the image line is current (idempotent)
            sudo sed -i "s|^\s*image:\s*.*|    image: $DOCKER_IMAGE|g" docker-compose.yml

            echo "⬆️  Starting app stack..."
            sudo docker compose up -d

            echo "⏳ Waiting for app..."
            sleep 30
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "✅ App is healthy on http://localhost:3000"
            else
              echo "❌ App health check failed; recent logs:"
              sudo docker compose logs --tail=50
              exit 1
            fi

            echo "🧹 Pruning old images..."
            sudo docker image prune -f

       - name: Clean up old Nginx configs
         uses: appleboy/ssh-action@v1.0.3
         with:
           host: ${{ secrets.CONTABO_HOST }}
           username: ${{ secrets.CONTABO_USERNAME }}
           key: ${{ secrets.CONTABO_SSH_KEY }}
           port: ${{ secrets.CONTABO_PORT }}
           script: |
             set -e
             echo "🧹 Cleaning up old Nginx configs..."
             
             # Remove all enabled sites to avoid SSL certificate errors
             sudo rm -f /etc/nginx/sites-enabled/*
             
             # Test nginx config
             sudo nginx -t
             
             # Reload nginx
             sudo systemctl reload nginx
             
             echo "✅ Nginx cleaned up - app will run on localhost:3000"

       - name: Final health check
         uses: appleboy/ssh-action@v1.0.3
         with:
           host: ${{ secrets.CONTABO_HOST }}
           username: ${{ secrets.CONTABO_USERNAME }}
           key: ${{ secrets.CONTABO_SSH_KEY }}
           port: ${{ secrets.CONTABO_PORT }}
           script: |
             set -e
             echo "🔍 Final health check..."
             sleep 10

             if curl -f -s "http://localhost:3000" > /dev/null; then
               echo "✅ App running on localhost:3000"
               echo "🌐 Access your app at: http://your-server-ip:3000"
             else
               echo "❌ App not accessible"
               sudo docker compose ps || true
               exit 1
             fi
